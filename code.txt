#include<GL/glut.h>
#include<math.h>
#include<stdio.h>
#define cout(a) printf("%d",a)

int campus[1234][820];
float green=0.01,blue=0.02;
int des;
int pt;
int xyz[100][100]={{0,0},{57,31},{4,92},{50,78},{61,40},{9,3},{45,5},{15,83},{28,75},{43,112},{42,36},{49,33},{11,13},{4,10},{3,38},{12,76},{49,15},{58,5},{75,11},{75,92},{51,117},{57,101},{63,103},{50,98},{62,115},{57,58},{50,41},{11,9}};
//(4,93)--->lT
//(51,118)--->11
//-----------------------------------------------------------------------------------------------------------------------------------------
const int row=80;
const int column=120;

struct points
{
	int x;
	int y;
};
struct points tp;

struct node
{
	struct points data;
	struct node * next;
};

struct node *rear=NULL;
struct node *front=NULL;

struct points pp(int x,int y);
void display(struct points point);
void push(struct points point);
void pop();
struct points Front();
void display_parent();

void display(struct points point)
{
	printf("%d ",point.x);
	printf("%d",point.y);
}
struct points pp(int x,int y)
{
	struct points p;
	p.x=x;
	p.y=y;
	return p;
}

void push(struct points point)
{
	if(front==NULL)
	{
		front=(struct node*)malloc(sizeof(struct node));
		front->data=point;
		front->next=NULL;
		rear=front;
		return;
	}
	struct node *temp=(struct node*)malloc(sizeof(struct node));
	temp->data=point;
	temp->next=NULL;
	rear->next=temp;
	rear=temp;
}
void pop()
{
	if(front==0)
	return;
	struct node *temp=front;
	front=front->next;
	if(front==NULL)
	rear=NULL;
	free(temp);
}
struct points Front()
{
	if(front==NULL)
	return tp;

	return front->data;
}
int isempty()
{
	if(front==NULL)
	return 1;
	return 0;
}

int move[9][2]={{0,0},{0,1},{1,0},{1,1},{0,-1},{-1,-1},{-1,0},{1,-1},{-1,1}};

int visited[123][123]={0};
struct points parent[123][123];

int isvalid(int x,int y)
{
	return x>=0&&y>=0&&x<row&&y<column;
}
int bfs(int st_row,int st_column,int end_row,int end_column)
{
	visited[st_row][st_column]=1;
	push(pp(st_row,st_column));
	parent[st_row][st_column]=pp(-1,-1);
	while(!isempty())
	{
		struct points point=Front();
		              pop();
		              int i;
		              for(i=1;i<=8;i++)
		              {
		              	int nx=point.x+move[i][0];
		              	int ny=point.y+move[i][1];

		              	if(isvalid(nx,ny)&&(campus[nx][ny]==1||campus[nx][ny]==0)&&visited[nx][ny]==0)
		              	{
		              		visited[nx][ny]=1;
		              		push(pp(nx,ny));
		              		parent[nx][ny]=point;
		              		if(nx==end_row&&ny==end_column)
		              		return 1;
						  }
					  }
	}
	return 0;
}
void display_parent(int end_row,int end_column)
{
	int x=end_row,y=end_column;
	struct points point=pp(end_row,end_column);
	while(point.x!=tp.x||point.y!=tp.y)
	{
		//display(point);
		plot(point.y,point.x,1);
		point=parent[point.x][point.y];
	}

}
//--------------------------------------------------------------------------------------------------------------------------------------------------

int width=10;

void plot(int x, int y,int c)
{
glBegin(GL_POINTS);

int i, j;
   glColor3f(1,1,0.0);
   if(campus[y][x]==0&&c==0)
   {
    glColor3f(1.0,1.0,1.5);
   }
   if(campus[y][x]==3&&c==0)
   {
   glColor3f(0.0,1,0.0);
   }
   if(campus[y][x]==4&&c==0)
   glColor3f(0.50,0.01,0.0);
   if(campus[y][x]==2&&c==0)
   {
    glColor3f(0.0,0.1,0.9);
   }
   if(campus[y][x]==5&&c==0)
   {
    glColor3f(0.0,1.0,0.5);
   }
   if(campus[y][x]==6&&c==0)
   {
    glColor3f(0.0,0.6,0.5);
   }
   if(campus[y][x]==7&&c==0)
   {
    glColor3f(0.2,0.1,0.1);
   }
   if(campus[y][x]==8&&c==0)
   {
    glColor3f(.5,.5,0.5);
   }
   if(campus[y][x]==9&&c==0)
   {
    glColor3f(0.9,0.9,0.5);
   }
   if(c==1)
   glColor3f(1.0,0.0,0);

for(i=(x)*width; i<=(x+1)*width-1; i++)
{
for(j=(y)*width; j<=(y+1)*width-1; j++)
{
   glVertex2i(i,j);

}
}
glEnd();
glFlush();
}

void myInit(void)
{
glClearColor(0.0,0.4,0.0,0.0);
glColor3f(0.0f,1.0f,0.0f);
glPointSize(1.0);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluOrtho2D(0,1200.0,800,0);
}

void myDisplay(void)
{
    glClear(GL_COLOR_BUFFER_BIT);
    glBegin(GL_LINES);
    int i,j,k,l;
    glColor3f(0,0,0);
    for(i=0;i<=800;i+=width)
    {
        glVertex3f(1200,i,0);
        glVertex3f(0,i,0);
    }
    for(i=1200;i>=0;i-=width)
    {
        glVertex3f(i,0,0);
        glVertex3f(i,800,0);
    }

    for(i=0;i<80;i++)
    {
       for(j=0;j<120;j++)
        plot(j,i,0);
    }
    glEnd();
    bfs(xyz[pt][0],xyz[pt][1],xyz[des][0],xyz[des][1]);
    display_parent(xyz[des][0],xyz[des][1]);
    glFlush();

}

void main(int argc, char** argv)
{


printf("\n\n                                                 WELCOME TO IIEST!!\n");
printf("------------------------------------------------------------------------------------------------------------------------");
printf("\n                           #LOVE_FOR_IIEST       #LOVE_IN_IIEST         #LOVE_IIEST 3>\n");
printf("\nSkip Intro:(yes/no)\n");
char intro[12];
gets(intro);

if((intro[0]=='n'||intro[0]=='N')&&(intro[1]=='o'||intro[1]=='O'))
{
printf("\nMISSING IIEST?(yes/no)\n");
char s[10];
gets(s);
if((s[0]=='n'||s[0]=='N')&&(s[1]=='o'||s[1]=='O'))
{
    char s2[10];
    printf("\nAre you non-IIestian :D?((yes/no)");
    gets(s2);
    if((s2[0]=='n'||s2[0]=='N')&&(s2[1]=='o'||s2[1]=='O'))
    {
        printf("Still you are not missing this heaven #IIEST ,rear to hear that :(\n");
    }
    else
    {
        printf("It may be hard to realize the map ,sorry for that ,but you should focus on concept....algorithm :D ");
    }
    printf("\nAnyway,Lets get into it :D\n");
    printf("--------------------------------\n");
    printf("Press :\n");
    printf("1.Continue \n");
    printf("0.Exit\n");
    int ch;
    scanf("%d",&ch);
    if(ch==0)
        return 0;
}
else{
    printf("\nDon't worry we will have a round of our campus...you will feel fresh.:D\n");

    printf("\nAnyway,Lets get into it :D\n");
    printf("--------------------------------\n");
    printf("Press :\n");
    printf("1.Continue \n");
    printf("0.Exit\n");
    int ch;
    scanf("%d",&ch);
    if(ch==0)
        return 0;

}
}
printf("\nLet's Explore our campus virtually :D\n\n");
printf("\n------------------------------------------------------------------------------------------------------------------------\n\n");
printf("Following are the different favorite and most visited area of our heaven IIEST :D\n");
printf("Select number corresponding Source and destination to find out the shortest route between them.");
printf("\n\n\nPLACES :\n1.Pandya\t\t\t2.Lt.Williams\t\t\t3.Nivedita \t\t\t4.Hospital\n5.Library\t\t\t6.N.B\t\t\t\t7.Gym\t\t\t\t8.OVAL\n9.Slater\t\t\t10.Clock Tower\t\t\t11.Graveyard\t\t\t12.I.Hall\n13.SNT_building\t\t\t14.B.E Model School\t\t15.White_house(Director House)\t16.Guest House\n17.Student_Amenities\t\t18.1st Gate\t\t\t19.2nd Gate\t\t\t20.Hostel_11\n21.Hostel_9\t\t\t22.Hostel_8\t\t\t23.Hostel_10\t\t\t24.Hostel_7\n25.Wolfendon\t\t\t26.Basketball_Court\t\t27.Academic_Building\t\t\t");
printf("\n\nGive_Source and Destination........eg for Library to Hostel_11 give source :5  destination :20\n");
printf("\nSource :");
scanf("%d",&pt);
printf("\nDestination :");
scanf("%d",&des);
//=====================================================================================================================================
char c;
scanf("%c",&c);
freopen("input.txt","r",stdin);
int i,j;
for( i=0;i<80;i++)
{
    for( j=0;j<120;j++)
    {
      scanf("%d",&campus[i][j]);
    }
}

glutInit(&argc, argv);
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize(1200,750);
glutInitWindowPosition(200,0);
glutCreateWindow("IIEST_LOVE");
glutDisplayFunc(myDisplay);
myInit();
glutMainLoop();
}
